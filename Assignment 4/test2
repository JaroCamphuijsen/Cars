import Tkinter, random
import vtk
from vtk.tk.vtkTkRenderWidget import vtkTkRenderWidget
from Tkinter import *

def createOpacityTransferFunction(values):
    opacityTransferFunction = vtk.vtkPiecewiseFunction()
    opacityTransferFunction.AddPoint(1.0, 0)
    for v in values:
        opacityTransferFunction.AddPoint(v - 30, 0)
        opacityTransferFunction.AddPoint(v, .3)
        opacityTransferFunction.AddPoint(v + 30, 0)
    opacityTransferFunction.AddPoint(17.0, 0)
    return opacityTransferFunction

root = Tkinter.Tk() 
aRenderer = vtk.vtkRenderer()
aRenderer.TexturedBackgroundOn()
renderWidget = vtkTkRenderWidget(root,width=800,height=600)
renderWidget.pack(expand='true',fill='both')
renWin = renderWidget.GetRenderWindow()
renWin.AddRenderer(aRenderer)
aRenderer.SetBackground(1, 1, 1)
renWin.SetSize(600, 480)

reader = vtk.vtkImageReader()
reader.SetDataExtent(0,499,0,469,1,136)
reader.SetDataSpacing(1,1,1.5)
reader.SetDataScalarTypeToUnsignedChar()
reader.SetFilePattern("./WholeFrog/frog.%s%03d.raw")
# reader.SetDataMask(0x7fff)
reader.Update()

 # Create transfer mapping scalar value to opacity
opacityTransferFunction = createOpacityTransferFunction([1,2,7,9,13])
opacityTransferFunction = createOpacityTransferFunction([1,2,7,9,13])


# Create transfer mapping scalar value to color
colorTransferFunction = vtk.vtkColorTransferFunction()
colorTransferFunction.AddRGBPoint(1.0, 0.75, 0.0, 0.0)
colorTransferFunction.AddRGBPoint(2.0, 0.65, 0.65, 0.6)

colorTransferFunction.AddRGBPoint(4.0, 1.0, 1.0, 0.0)
colorTransferFunction.AddRGBPoint(7.0, 0.0, 1.0, 0.0)
colorTransferFunction.AddRGBPoint(10.0, 0.0, 1.0, 1.0)
colorTransferFunction.AddRGBPoint(13.0, 1.0, 1.0, 1.0)
colorTransferFunction.AddRGBPoint(16.0, 1.0, 0.0, 1.0)

# The property describes how the data will look
volumeProperty = vtk.vtkVolumeProperty()
volumeProperty.SetColor(colorTransferFunction)
volumeProperty.SetScalarOpacity(opacityTransferFunction)
# volumeProperty.ShadeOn()
volumeProperty.SetInterpolationTypeToLinear()

# The mapper / ray cast function know how to render the data
compositeFunction = vtk.vtkVolumeRayCastCompositeFunction()
volumeMapper = vtk.vtkVolumeRayCastMapper()
volumeMapper.SetVolumeRayCastFunction(compositeFunction)
volumeMapper.SetInputConnection(reader.GetOutputPort())

# The volume holds the mapper and the property and
# can be used to position/orient the volume
volume = vtk.vtkVolume()
volume.SetMapper(volumeMapper)
volume.SetProperty(volumeProperty)
aRenderer.AddVolume(volume)

# Camera (viewpoint) settings
aCamera = vtk.vtkCamera()
aRenderer.SetActiveCamera(aCamera)
aCamera.SetPosition(0,0,-1)
aCamera.Azimuth(-45)
aRenderer.ResetCamera() #Without this camera Reset, the actors will not 
# be displayed on starting the visualization
aCamera.Dolly(1.3)

class scale:
    "Scale"
    def __init__(self, root, renWin, volumeProperty):
        self.renWin, self.volumeProperty = renWin, volumeProperty
        scale = Tkinter.Scale(root, length=1000, from_=0, to=200,
                              resolution=.1, orient= "horizontal", 
                              command=self.change)
        scale.set(1)  
        scale.pack(side='bottom')

    def change(self, val):
        volumeProperty.SetScalarOpacity(createOpacityTransferFunction([int(float(val))]))
        self.renWin.Render()


scale=scale(root, renWin, volumeProperty)

def callback():
    volumeProperty.SetScalarOpacity(createOpacityTransferFunction([8]))
    renWin.Render()

b = Tkinter.Button(root, text="8", command=callback)
b.pack()

root.mainloop()